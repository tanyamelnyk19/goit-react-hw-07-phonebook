{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","actions","addContact","createAction","deleteContact","filter","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","resetForm","className","s","form","onSubmit","e","preventDefault","newContact","id","uuidv4","some","contact","toLowerCase","alert","label","input","type","value","pattern","title","required","onChange","target","button","Filter","Contact","ContactList","filteredName","normalizedFilter","includes","getFilteredName","map","onClick","App","initialState","contactsList","createReducer","payload","contactsFilter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","persistedReducer","persistReducer","contactsReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","mainStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.69163739.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__V8N2j\",\"input\":\"Filter_input__p5iRb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__35deT\",\"button\":\"ContactList_button__1XyeR\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction(\"contact/add\");\r\n\r\n// export const addContact = (contact) => ({\r\n//     type: \"contact/add\",\r\n//     payload: contact,\r\n// });\r\n\r\nconst deleteContact = createAction(\"contact/delete\");\r\n\r\n// export const deleteContact = (contactId) => ({\r\n//     type: \"contact/delete\",\r\n//     payload: contactId,\r\n// });\r\n\r\nconst filter = createAction(\"contact/filter\");\r\n\r\n// export const filter = value => ({\r\n//     type: \"contact/filter\",\r\n//     payload: value,\r\n// })\r\n\r\nconst actions = { addContact, deleteContact, filter };\r\n\r\nexport default actions;","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/actions';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n  const contacts = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n\n    const contactInPhonebook = contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\n    );\n    \n    if (contactInPhonebook) {\n      alert(`${newContact.name} is already in contacts.`);\n    } else {\n      // onSubmit(newContact);\n      dispatch(actions.addContact(newContact));\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleNameChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleNumberChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapStateToProps = (state) => ({\n//   contacts: state.contacts,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (contact) => dispatch(actions.addContact(contact)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/actions';\n\nexport default function Filter() {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();  \n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        onChange={(e) => dispatch(actions.filter(e.target.value))}\n      />\n    </label>\n  );\n}\n\n// const mapStateToProps = ({ filter }) => ({\n//   filter: filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   handleFilter: (e) => dispatch(actions.filter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import PropTypes from 'prop-types';\n\nexport default function Contact({ name, number }) {\n  return (\n    <span>\n      {name}: {number}\n    </span>\n  );\n}\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import Contact from '../Contact';\nimport s from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/actions';\n\nexport default function ContactList() {\n  const getFilteredName = (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredName = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n    return filteredName;\n  };\n\n  const filteredName = useSelector(({ contacts, filter }) => getFilteredName(contacts, filter));\n  const dispatch = useDispatch();  \n\n  return (\n    <ul>\n      {filteredName.map(({ id, name, number }) => (\n        <li className={s.contact} key={id}>\n          <Contact name={name} number={number} />\n          <button className={s.button} onClick={() => dispatch(actions.deleteContact(id))}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// const mapStateToProps = ({ contacts, filter }) => ({\n//   filteredName: getFilteredName(contacts, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   deleteContact: id => dispatch(actions.deleteContact(id)),\n// })\n\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;","import { combineReducers } from 'redux';\r\nimport contactsData from '../../contactsData/contacts.json';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './actions';\r\n\r\nconst initialState = contactsData;\r\n\r\nconst contactsList = createReducer(initialState, {\r\n    [actions.addContact]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteContact]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst contactsFilter = createReducer('', {\r\n    [actions.filter]: (_, { payload }) => payload,\r\n})\r\n\r\n// const contactsList = (state = initialState, { type, payload }) => {\r\n//     switch (type) {\r\n//         case \"contact/add\":\r\n//             return [...state, payload]; \r\n//         case \"contact/delete\":\r\n//             return state.filter(contact => contact.id !== payload);\r\n//         default:\r\n//             return state;\r\n//     };\r\n// };\r\n\r\n// const contactsFilter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case \"contact/filter\":\r\n//             return payload;\r\n//         default:\r\n//             return state;\r\n//     };\r\n// };\r\n\r\nexport default combineReducers({\r\n    contacts: contactsList,\r\n    filter: contactsFilter,\r\n})\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from './contacts/reducers';\r\nimport logger from 'redux-logger';\r\nimport { \r\n    persistStore, \r\n    persistReducer, \r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER, \r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(contactsPersistConfig, contactsReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n        }\r\n    }).concat(logger),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst mainStore = { store, persistor };\r\n\r\nexport default mainStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport mainStore from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={mainStore.store}>\n      <PersistGate loading={null} persistor={mainStore.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__2v8ut\",\"input\":\"ContactForm_input__3V2oj\",\"button\":\"ContactForm_button__n8lMf\"};"],"sourceRoot":""}